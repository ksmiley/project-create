package edu.uky.comm.controls{	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.Shape;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;		public class AccordianPane extends Sprite	{		private static const DEFAULT_GUTTER:Number = 3;		//private static const DEFAULT_EXPAND_ICON:Class = AccordianExpand;		//private static const DEFAULT_CONTRACT_ICON:Class = AccordianContract;				private var _content:DisplayObject;		private var _expandIcon:DisplayObject;		private var _contractIcon:DisplayObject;		private var _titleBar:Sprite;		private var _titleBarBg:DisplayObject;		private var _titleField:TextField;		private var _textFormats:Object;		private var _title:String;		private var _expanded:Boolean;		private var _titleBarHeight:Number;		private var _titleBarWidth:Number;		private var _gutter:Number;				public function AccordianPane(newTitle:String = null, newContent:DisplayObject = null):void		{			//_expandIcon = new DEFAULT_EXPAND_ICON;			//_contractIcon = new DEFAULT_CONTRACT_ICON;			_gutter = DEFAULT_GUTTER;			_textFormats = new Object();			_expanded = false;						title = newTitle;			content = newContent;		}				public function get expanded():Boolean		{			return _expanded;		}				public function set expanded(value:Boolean)		{			if (value != _expanded)			{				_expanded = value;				if (_expanded)				{					addChild(_content);					_drawTitleBar();				}				else				{					removeChild(_content);					_drawTitleBar();				}				//dispatchEvent(new Event(Event.CHANGE, true));				dispatchEvent(new Event(Event.CHANGE));			}		}				public function get content():DisplayObject		{			return _content;		}				public function set content(value:DisplayObject):void		{			if (value !== _content)			{				if (_content != null && contains(_content))				{					removeChild(_content);				}				_content = value;				if (_content != null)				{					_positionContent();					if (_expanded)  addChild(_content);				}			}		}				public function get title():String		{			return _title;		}				public function set title(value:String)		{			if (value != _title)			{				_title = value;				_refreshTitleField();				_calcTitleBarHeight();				_drawTitleBar();			}		}				public function get textFormats():Object		{			return _textFormats;		}				public function set textFormats(value:Object):void		{			if (value != null && value !== _textFormats)			{				_textFormats = value;				_refreshTitleField();				_calcTitleBarHeight();				_drawTitleBar();			}		}				public function get gutter():Number		{			return _gutter;		}				public function set gutter(value:Number):void		{			if (value != _gutter)			{				_gutter = value;				_calcTitleBarHeight();				_drawTitleBar();			}		}				public function get expandIcon():DisplayObject		{			return _expandIcon;		}				public function set expandIcon(value:DisplayObject):void		{			if (value !== _expandIcon)			{				_expandIcon = value;				_calcTitleBarHeight();				_drawTitleBar();			}		}			public function get contractIcon():DisplayObject		{			return _contractIcon;		}				public function set contractIcon(value:DisplayObject):void		{			if (value !== _contractIcon)			{				_contractIcon = value;				_calcTitleBarHeight();				_drawTitleBar();			}		}				public function get titleBackground():DisplayObject		{			return _titleBarBg;		}				public function set titleBackground(value:DisplayObject):void		{			if (value !== _titleBarBg)			{				_titleBarBg = value;				_calcTitleBarHeight();				_drawTitleBar();			}		}				override public function set width(value:Number):void		{			if (value != _titleBarWidth && value > 0)			{				if (_content != null)  _content.width = value;				_titleBarWidth = value;				_drawTitleBar();			}		}						private function _positionContent():void		{			if (_content != null)			{				_content.x = 0;				_content.y = _titleBarHeight + _gutter;			}		}				private function _drawTitleBar():void		{			if (!_titleBarWidth || !_titleBarHeight)  return;						// remove the old title bar, if it exists			if (_titleBar != null && _titleBar.parent === this) 			{				removeChild(_titleBar);				// also clear out the children, to aid garbage collection				while (_titleBar.numChildren > 0)				{					_titleBar.removeChildAt(0);				}			}						// now create an empty Sprite to build the title bar in			_titleBar = new Sprite();			// add the background. if one isn't defined, put a transparent shape down instead.			// it'll block out the correct amount of space, which is needed to make the right			// hit area for mouse events			if (_titleBarBg != null)			{				_titleBarBg.x = _titleBarBg.y = 0;				_titleBarBg.width  = _titleBarWidth;				_titleBarBg.height = _titleBarHeight;				_titleBar.addChild(_titleBarBg);			}			else			{				var blankBg:Shape = new Shape();				blankBg.graphics.beginFill(0xFFFFFF, 0.0);				blankBg.graphics.drawRect(0, 0, _titleBarWidth, _titleBarHeight);				blankBg.graphics.endFill();				blankBg.x = blankBg.y = 0;				_titleBar.addChild(blankBg);			}						// now add the appropriate icon, if given. curX will be used to position the 			// title textfield, since the x position is different for icon and no icon			var curX:Number = _gutter;			var curIcon:DisplayObject = _expanded ? _contractIcon : _expandIcon;			if (curIcon != null)			{				curIcon.x = curX;				curIcon.y = Math.floor((_titleBarHeight - curIcon.height) / 2);				_titleBar.addChild(curIcon);				curX += curIcon.width + _gutter;			}						// place the textfield and put the title in it			if (_title != null && _title.length > 0)			{				_titleField.width = _titleBarWidth - curX - _gutter;				_titleField.x = curX;				_titleField.y = Math.floor((_titleBarHeight - _titleField.textHeight) / 2);				_titleBar.addChild(_titleField);			}						_titleBar.x = _titleBar.y = 0;			_titleBar.buttonMode = true;			_titleBar.useHandCursor = true;			_titleBar.mouseChildren = false;			_titleBar.addEventListener(MouseEvent.CLICK, _titleClickHandler, false, 0, true);						addChild(_titleBar);						_positionContent();		}				private function _refreshTitleField():void		{			if (_title != null)			{				_titleField = new TextField();				_titleField.selectable = false;				_titleField.text = _title;				if ("title" in _textFormats && _textFormats.title is TextFormat)				{					_titleField.defaultTextFormat = _textFormats.title;					_titleField.setTextFormat(_textFormats.title);				}				if ("embedFonts" in _textFormats && _textFormats.embedFonts)				{					_titleField.embedFonts = true;				}				//_titleField.width = _titleBarWidth - curX - _gutter;				//_titleField.x = curX;				//_titleField.y = Math.floor((_titleBarHeight - _titleField.textHeight) / 2);				_titleField.height = _titleField.textHeight;			}		}				private function _calcTitleBarHeight():void		{			var maxHeight:Number = Math.max(				((_title == null || _titleField == null) ? 0 : _titleField.textHeight),				(_expandIcon   == null ? 0 : _expandIcon.height),				(_contractIcon == null ? 0 : _contractIcon.height),				(_titleBarBg   == null ? 0 : _titleBarBg.height)			);			_titleBarHeight = (maxHeight > 0) ? maxHeight + 2*_gutter : 0;		}						private function _titleClickHandler(e:MouseEvent):void		{			expanded = !expanded;			//e.updateAfterEvent();		}	}}