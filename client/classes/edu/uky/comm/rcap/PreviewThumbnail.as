package edu.uky.comm.rcap{	import flash.display.DisplayObject;	import flash.display.Sprite;		import edu.uky.comm.rcap.RenderPreview;	import edu.uky.comm.rcap.PreviewBitmap;	import edu.uky.comm.rcap.Config;		public class PreviewThumbnail extends Sprite	{		private static const DEFAULT_GUTTER:Number = 2;		private static const DEFAULT_BACKER:Class = ThumbBacker;				private var _background:DisplayObject;  // what the preview thumb gets centered on top of		private var _image:PreviewBitmap;       // the actual thumbnail, generated from the full preview		private var _gutter:Number;    // how many pixels to leave empty on each side of the image				public function PreviewThumbnail(bgSprite:DisplayObject = null, renderer:RenderPreview = null, newGutter:Number = DEFAULT_GUTTER):void		{			buttonMode = true;						_gutter = (isNaN(newGutter) || newGutter < 0) ? DEFAULT_GUTTER : newGutter;						_background = (bgSprite == null) ? new DEFAULT_BACKER() : bgSprite;			addChild(_background);						source = renderer;		}				public function get bitmap():PreviewBitmap		{			return _image;		}				public function get source():RenderPreview		{			return _image.renderer;		}				public function set source(value:RenderPreview)		{			// remove the old image if there was one			//if (_image != null && _image is PreviewBitmap && _image.stage != null)			if (_image != null && _image is PreviewBitmap)			{				removeChild(_image);				_image = null;			}			// add a new one if one is specified. if value is null, then the image is simply removed			if (value != null)			{				_image = new PreviewBitmap(value);				_image.mouseEnabled = false;				if ('useThumbSmoothing' in Config)				{					_image.useSmoothing = Config.useThumbSmoothing;				}				_resizeBitmap();				update();				addChild(_image);			}		}				public function get gutter():Number		{			return _gutter;		}				public function set gutter(newGutter:Number):void		{			_gutter = (isNaN(newGutter) || newGutter < 0) ? DEFAULT_GUTTER : newGutter;			_resizeBitmap();			update();		}				public function update():void		{			if (_image != null && _image.renderer != null)			{				if (_image.renderer.showOutlines)				{					_image.renderer.showOutlines = false;					_image.update();					_image.renderer.showOutlines = true;				}				else				{					_image.update();				}				_centerImage();			}		}				private function _resizeBitmap():void		{			_image.setSize(_background.width - (_gutter * 2), _background.height - (_gutter * 2));		}				private function _centerImage():void		{			_image.x = Math.floor((_background.width - _image.width) / 2);			_image.y = Math.floor((_background.height - _image.height) / 2);		}	}}